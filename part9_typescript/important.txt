This part is all about TypeScript: an open-source typed superset of JavaScript developed by Microsoft that compiles to plain JavaScript.
This means that TypeScript extends the functionality of JavaScript by adding new features and syntax while still maintaining compatibility
with JavaScript.

As a superset, TypeScript includes all the features of JavaScript and introduces additional features such as
:static typing, interfaces, classes, modules, and more. 
These features enable developers to write more structured and maintainable code by catching errors during development, providing better
tooling support, and enhancing code organization.

TypeScript code cannot be executed directly by browsers or JavaScript engines. Instead, it needs to be transpiled or compiled into
JavaScript code, which can then be executed by browsers, Node.js, or other JavaScript runtime environments. The TypeScript compiler (tsc)
is responsible for transforming TypeScript code into plain JavaScript that can be understood and executed by JavaScript engines.

By compiling TypeScript code to JavaScript, developers can leverage the benefits of TypeScript during development while ensuring that
the final output is compatible with all JavaScript environments. This allows TypeScript code to be used in a wide range of scenarios,
including web development, server-side development, and more.

In TypeScript, human-readable source code is transformed into another human-readable source code, so the correct term would be transpiling.
However, compiling has been the most commonly-used term in this context, so we will continue to use it.

Tooling:
npm package ts-node. It compiles and executes the specified TypeScript file immediately so that there is no need for a separate compilation step.

npm install --save-dev ts-node-dev It is meant to be used only with a development environment that takes care of recompilation on every change, so restarting the application won't be necessary.



Starting with ts:
 npm install typescript --save-dev

 "scripts": {
    "tsc": "tsc"
  },


We can now initialize our tsconfig.json settings by running:

npm run tsc -- --init


npm install express
npm install --save-dev eslint @types/express @typescript-eslint/eslint-plugin @typescript-eslint/parser


We also create a .eslintrc file with the following content:

{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking"
  ],
  "plugins": ["@typescript-eslint"],
  "env": {
    "browser": true,
    "es6": true,
    "node": true
  },
  "rules": {
    "@typescript-eslint/semi": ["error"],
    "@typescript-eslint/explicit-function-return-type": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/restrict-template-expressions": "off",
    "@typescript-eslint/restrict-plus-operands": "off",
    "@typescript-eslint/no-unsafe-member-access": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      { "argsIgnorePattern": "^_" }
    ],
    "no-case-declarations": "off"
  },
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json"
  }
}


Now we just need to set up our development environment, and we are ready to start writing some serious code. There are many different options for this. One option could be to use the familiar nodemon with ts-node. However, as we saw earlier, ts-node-dev does the same thing, so we will use that instead. So, let's install ts-node-dev:
npm install --save-dev ts-node-dev




As you can see, there is a lot of stuff to go through before beginning the actual coding. When you are working on a real project, careful preparations support your development process. Take the time needed to create a good setup for yourself and your team, so that everything runs smoothly in the long run.



We finally define a few more npm scripts, and voil√†, we are ready to begin:

{
  // ...
  "scripts": {
    "tsc": "tsc",
    "dev": "ts-node-dev index.ts",
    "lint": "eslint --ext .ts ."
  },
  // ...
}


Let's try to create a production build by running the TypeScript compiler. Since we have defined the outdir in our tsconfig.json, nothing's left but to run the script npm run tsc.


npm run tsc

Just like magic, a native runnable JavaScript production build of the Express backend is created in file index.js inside the directory build.

Files usage:

The tsconfig.json file is used to define how the TypeScript compiler should interpret the code, how strictly the compiler should work, which
files to watch or ignore, and much more. For now, we will only use the compiler option noImplicitAny, which does not require having types for
all variables used.